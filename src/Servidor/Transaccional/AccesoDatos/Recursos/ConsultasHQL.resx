<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CabeceraObtenerCarta" xml:space="preserve">
    <value>Select c from Carta c left join fetch c.Resumen as resumen left join fetch c.Asociado as asociado where </value>
    <comment>Cabecera del query para el filtro de cartas</comment>
  </data>
  <data name="FiltroObtenerCartaFecha" xml:space="preserve">
    <value>c.Fecha between '{0}' and '{1}'</value>
  </data>
  <data name="FiltroObtenerCartaId" xml:space="preserve">
    <value>c.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerCartaIdAsociado" xml:space="preserve">
    <value>asociado.Id = {0}</value>
    <comment>Filtro por Asociado</comment>
  </data>
  <data name="FiltroObtenerCartaResumen" xml:space="preserve">
    <value>upper(resumen.Descripcion) like '%{0}%'</value>
  </data>
  <data name="ObtenerAgentesYPoderes" xml:space="preserve">
    <value>Select distinct(a) from Agente a left join fetch a.Poderes order by a.Id</value>
    <comment>Selecciona todos los agentes y sus objetos</comment>
  </data>
  <data name="ObtenerAsignacionesPorCarta" xml:space="preserve">
    <value>Select a from Asignacion a where a.Carta = '{0}'</value>
    <comment>Consulta las asignaciones de una carta determinada</comment>
  </data>
  <data name="ObtenerAsociadoConTodo" xml:space="preserve">
    <value>Select distinct(a) from Asociado a left outer join fetch a.Justificaciones where a.Id = '{0}' order by a.Id</value>
    <comment>Selecciona el asociado con todas sus listas</comment>
  </data>
  <data name="ObtenerAuditoriaPorFKYTabla" xml:space="preserve">
    <value>Select a from Auditoria a where a.Fk = '{0}' and a.Tabla = '{1}'</value>
    <comment>Selecciona todas las auditorias que poseen una FK en una tabla espacifica</comment>
  </data>
  <data name="ObtenerContactosPorAsociado" xml:space="preserve">
    <value>Select c from Contacto c where c.Asociado.id = '{0}'</value>
    <comment>Selecciona todos los contactos de un asociado</comment>
  </data>
  <data name="ObtenerDatosTransferenciaPorAsociado" xml:space="preserve">
    <value>Select d from DatosTransferencia d where d.Asociado.id = '{0}'</value>
    <comment>Selecciona todos los datos de transferencia de un asociado</comment>
  </data>
  <data name="ObtenerListaDatosValoresPorParametro" xml:space="preserve">
    <value>Select distinct(l) from ListaDatosValores l where l.Id = '{0}' order by l.Valor</value>
    <comment>Trae la lista de valores por el parametro del id</comment>
  </data>
  <data name="ObtenerListaDatosDominioPorParametro" xml:space="preserve">
    <value>Select l from ListaDatosDominio l where l.Filtro = '{0}'</value>
    <comment>Obtiene la lista de valores respectiva a la tabla CFG_DOMINIOS con el parametro que se le pase</comment>
  </data>
  <data name="ObtenerPoderesPorInteresado" xml:space="preserve">
    <value>Select p from Poder p where p.Interesado.Id = '{0}'</value>
    <comment>Selecciona todas los poderes que posee un interesado</comment>
  </data>
  <data name="ObtenerRolesYObjetos" xml:space="preserve">
    <value>Select distinct(r) from Rol r left join fetch r.Objetos order by r.Id</value>
    <comment>Selecciona todos los roles y sus objetos</comment>
  </data>
  <data name="ObtenerUsuarioPorIdYPassword" xml:space="preserve">
    <value>Select u from Usuario u left join fetch u.Rol as rol left join fetch rol.Objetos where u.Id = '{0}' and u.Password = '{1}'</value>
    <comment>Selecciona el usuario, rol y objetos, si el Id y el Password concuerdan con algún usuario de la BD</comment>
  </data>
  <data name="ObtenerUsuarioPorIniciales" xml:space="preserve">
    <value>Select u from Usuario u where u.Iniciales='{0}'</value>
    <comment>Selecciona un usuario por sus iniciales</comment>
  </data>
  <data name="VerificarExistenciaResolucion" xml:space="preserve">
    <value>Select r from Resolucion r where r.Id = {0} and r.FechaResolucion = '{1}' and r.Boletin.Id =  {2}</value>
    <comment>Verifica si existe una resolucion por sus ids</comment>
  </data>
  <data name="CabeceraObtenerCartaOut" xml:space="preserve">
    <value>Select c from CartaOut c where </value>
    <comment>Cabecera del query para el filtro de CartaOut</comment>
  </data>
  <data name="FiltroObtenerCartaOutStatus" xml:space="preserve">
    <value>c.Status = '{0}'</value>
    <comment>Filtro agregado a la cabecera para filtrar por status</comment>
  </data>
  <data name="FiltroObtenerCartaOutId" xml:space="preserve">
    <value>c.NRelacion like '{0}%'</value>
  </data>
  <data name="FiltroObtenerCartaOutFecha" xml:space="preserve">
    <value>c.FechaIngreso between '{0}' and '{1}'</value>
  </data>
  <data name="CabeceraObtenerMarca" xml:space="preserve">
    <value>Select m from Marca m left join fetch m.Asociado as asociado left join fetch m.Corresponsal as corresponsal left join fetch m.Interesado as interesado left join fetch asociado.Pais as pais left join fetch asociado.Idioma as pais left join fetch m.BoletinConcesion as boletinC left join fetch m.BoletinPublicacion as boletinP where </value>
    <comment>Cabecera del query para el filtro de marcas</comment>
  </data>
  <data name="FiltroObtenerMarcaDescripcion" xml:space="preserve">
    <value>upper(m.Descripcion) like '%{0}%'</value>
  </data>
  <data name="FiltroObtenerMarcaFecha" xml:space="preserve">
    <value>m.FechaPublicacion between '{0}' and '{1}'</value>
  </data>
  <data name="FiltroObtenerMarcaFichas" xml:space="preserve">
    <value>upper(m.Fichas) like '%{0}%'</value>
  </data>
  <data name="FiltroObtenerMarcaId" xml:space="preserve">
    <value>m.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerMarcaIdAsociado" xml:space="preserve">
    <value>asociado.Id = {0}</value>
    <comment>Filtro por Asociado</comment>
  </data>
  <data name="ObtenerInteresadoConTodo" xml:space="preserve">
    <value>Select distinct(i) from Interesado i left join fetch i.Pais left join fetch i.Nacionalidad where i.Id = '{0}' order by i.Id</value>
    <comment>Selecciona el asociado con todas sus objetos</comment>
  </data>
  <data name="ObtenerMarcaConTodo" xml:space="preserve">
    <value>Select m from Marca m left join fetch m.Asociado as asociado left join fetch m.Corresponsal as corresponsal left join fetch m.Servicio as servicio where m.Id = '{0}' order by m.Id</value>
  </data>
  <data name="ObtenerInfoAdicinalPorId" xml:space="preserve">
    <value>Select i from InfoAdicinal i where i.Id = '{0}'</value>
    <comment>Obtiene una info adicional dado su id</comment>
  </data>
  <data name="ObtenerInfoBolesPorMarcas" xml:space="preserve">
    <value>Select i from InfoBol i left outer join fetch i.TipoInfobol where i.Marca.Id = '{0}'</value>
    <comment>Obtener todos los infoboles de una marca</comment>
  </data>
  <data name="ObtenerOperacionesPorMarcas" xml:space="preserve">
    <value>Select o from Operacion o where o.CodigoAplicada = {0} and o.Aplicada = 'M'</value>
    <comment>Obtener todos las operaciones de una marca</comment>
  </data>
  <data name="ObtenerBusquedasPorMarca" xml:space="preserve">
    <value>Select b from Busqueda b where b.Marca.Id = '{0}'</value>
    <comment>Obtiene las busquedas que pertenecen a una marca determinada</comment>
  </data>
  <data name="ObtenerOperacionesPorMarcasYServicio" xml:space="preserve">
    <value>Select o from Operacion o where o.CodigoAplicada = {0} and o.Aplicada = 'M' and o.Servicio.Id = '{1}'</value>
    <comment>Obtener todos las operaciones de una marca y con un servicio</comment>
  </data>
  <data name="FiltroObtenerMarcaIdInteresado" xml:space="preserve">
    <value>interesado.Id = {0}</value>
    <comment>Filtro por Interesado</comment>
  </data>
  <data name="CabeceraObtenerFusion" xml:space="preserve">
    <value>Select f from Fusion f left join fetch f.Marca as marca left join fetch f.InteresadoEntre as interesadoEntre left join fetch f.InteresadoSobreviviente as interesadoSobreviviente left join fetch f.Agente as agente left join fetch f.Poder as poder where </value>
    <comment>Cabecera del query para el filtro de fusion</comment>
  </data>
  <data name="FiltroObtenerFusionFecha" xml:space="preserve">
    <value>f.Fecha between '{0}' and '{1}'</value>
  </data>
  <data name="FiltroObtenerFusionId" xml:space="preserve">
    <value>f.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerFusionIdMarca" xml:space="preserve">
    <value>marca.Id = {0}</value>
    <comment>Filtro por marca</comment>
  </data>
  <data name="CabeceraObtenerCesion" xml:space="preserve">
    <value>Select c from Cesion c left join fetch c.Marca as marca left join fetch c.Cedente as cedente left join fetch c.AgenteCedente as agenteCed left join fetch c.AgenteCesionario as agenteCes left join fetch c.PoderCedente as PoderCed  left join fetch c.PoderCesionario as PoderCes left join fetch c.Cedente as interesadoCed left join fetch c.Cesionario as interesadoCes left join fetch c.BoletinPublicacion as boletin where </value>
    <comment>Cabecera del query para el filtro de cesion</comment>
  </data>
  <data name="FiltroObtenerCesionFecha" xml:space="preserve">
    <value>c.FechaCesion between '{0}' and '{1}'</value>
    <comment>Filtro agregado a la cabecera para filtrar por fecha</comment>
  </data>
  <data name="FiltroObtenerCesionId" xml:space="preserve">
    <value>c.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerCesionIdMarca" xml:space="preserve">
    <value>marca.Id = {0}</value>
    <comment>Filtro por Marca</comment>
  </data>
  <data name="CabeceraObtenerInteresado" xml:space="preserve">
    <value>Select i from Interesado i left outer join i.Pais as pais where </value>
    <comment>Cabecera del query para el filtro de interesados</comment>
  </data>
  <data name="FiltroObtenerInteresadoId" xml:space="preserve">
    <value>i.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerInteresadoNombre" xml:space="preserve">
    <value>upper(i.Nombre) like '%{0}%'</value>
    <comment>Filtro por Nombre</comment>
  </data>
  <data name="CabeceraObtenerAgente" xml:space="preserve">
    <value>Select distinct(a) from Agente a left join fetch a.Poderes as poder where </value>
    <comment>Cabecera del query para el filtro de agentes</comment>
  </data>
  <data name="FiltroObtenerAgenteId" xml:space="preserve">
    <value>a.Id = '{0}'</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerAgenteNombre" xml:space="preserve">
    <value>upper(a.Nombre) like '%{0}%'</value>
    <comment>Filtro por Nombre</comment>
  </data>
  <data name="CabeceraObtenerPoder" xml:space="preserve">
    <value>Select p from Poder p left join fetch p.Boletin as boletin left join fetch p.Interesado as interesado where </value>
    <comment>Cabecera del query para el filtro de Poderes</comment>
  </data>
  <data name="FiltroObtenerPoderFecha" xml:space="preserve">
    <value>p.Fecha between '{0}' and '{1}'</value>
    <comment>Filtro por fecha</comment>
  </data>
  <data name="FiltroObtenerPoderId" xml:space="preserve">
    <value>p.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="ObtenerPoderesPorAgente" xml:space="preserve">
    <value>Select a from Agente a left join fetch a.Poderes as poder where a.Id = '{0}'</value>
    <comment>Selecciona todas los poderes que posee un Agente</comment>
  </data>
  <data name="ObtenerAgentesDeUnPoder" xml:space="preserve">
    <value>Select p from Poder p left join fetch p.Agentes where p.Id = '{0}'</value>
    <comment>Selecciona todos los agentes que tienen un poder</comment>
  </data>
  <data name="ObtenerInteresadosDeUnPoder" xml:space="preserve">
    <value>Select p from Poder p left join fetch p.Interesado where p.Id ='{0}'</value>
  </data>
  <data name="CabeceraObtenerLicencia" xml:space="preserve">
    <value>Select l from Licencia l left join fetch l.Marca as marca left join fetch l.AgenteLicenciatario as Alicentario left join fetch l.AgenteLicenciante as Alice left join fetch l.Asociado as asosia left join fetch l.Boletin as boletin left join fetch l.InteresadoLicenciatario as InterLicen left join fetch l.InteresadoLicenciante left join fetch l.PoderLicenciatario as Plicentario left join fetch l.PoderLicenciante as Plicenciant Where </value>
    <comment>Cabecera del query para filtro con Licencia</comment>
  </data>
  <data name="FiltroObtenerLicenciaFecha" xml:space="preserve">
    <value>l.Fecha between '{0}' and '{1}'</value>
    <comment>Filtro por fecha</comment>
  </data>
  <data name="FiltroObtenerLicenciaId" xml:space="preserve">
    <value>l.Id = {0}</value>
    <comment>Filtro por id</comment>
  </data>
  <data name="FiltroObtenerLicenciaIdMarca" xml:space="preserve">
    <value>marca.Id = {0}</value>
    <comment>Filtro por marca</comment>
  </data>
  <data name="CabeceraObtenerCambioDeDomicilio" xml:space="preserve">
    <value>Select c from CambioDeDomicilio c left join fetch c.Marca as marca left join fetch c.InteresadoActual as interesadoActual left join fetch c.InteresadoAnterior as interesadoAnterior left join fetch c.Agente as agente  left join fetch c.Poder as poder where </value>
    <comment>Cabecera del query para el filtro de fusion</comment>
  </data>
  <data name="FiltroObtenerCambioDeDomicilioId" xml:space="preserve">
    <value>c.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerCambioDeDomicilioIdMarca" xml:space="preserve">
    <value>marca.Id = {0}</value>
    <comment>Filtro por Asociado</comment>
  </data>
  <data name="CabeceraObtenerCambioDeNombre" xml:space="preserve">
    <value>Select c from CambioDeNombre c left join fetch c.Marca as marca left join fetch c.InteresadoActual as interesadoActual left join fetch c.InteresadoAnterior as interesadoAnterior left join fetch c.Agente as agente left join fetch c.Poder as poder where </value>
    <comment>Cabecera del filtro para Cambio De Nombre</comment>
  </data>
  <data name="FiltroObtenerCambioDeNombreId" xml:space="preserve">
    <value>c.Id = {0}</value>
    <comment>Filtra por id</comment>
  </data>
  <data name="FiltroObtenerCambioDeNombreIdMarca" xml:space="preserve">
    <value>marca.Id = {0}</value>
    <comment>Filtra por id de la marca</comment>
  </data>
  <data name="CabeceraObtenerCambioPeticionario" xml:space="preserve">
    <value>Select c from CambioPeticionario c left join fetch c.Marca as marca left join fetch c.InteresadoAnterior as anterior left join fetch c.AgenteAnterior as agenteAnt left join fetch c.AgenteActual as agenteAct left join fetch c.PoderAnterior as PoderAnt  left join fetch c.PoderActual as PoderAct left join fetch c.InteresadoAnterior as interesadoAnt left join fetch c.InteresadoActual as interesadoAct left join fetch c.BoletinPublicacion as boletin where </value>
    <comment>Cabecera del query para el filtro de fusion</comment>
  </data>
  <data name="FiltroObtenerCambioPeticionarioFecha" xml:space="preserve">
    <value>c.FechaCesion between '{0}' and '{1}'</value>
    <comment>Filtro agregado a la cabecera para filtrar por fecha</comment>
  </data>
  <data name="FiltroObtenerCambioPeticionarioId" xml:space="preserve">
    <value>c.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerCambioPeticionarioIdMarca" xml:space="preserve">
    <value>marca.Id = {0}</value>
    <comment>Filtro por Marca</comment>
  </data>
  <data name="CabeceraObtenerAsociado" xml:space="preserve">
    <value>Select a from Asociado a where </value>
    <comment>Cabecera del query para el filtro de asociados</comment>
  </data>
  <data name="FiltroObtenerAsociadoId" xml:space="preserve">
    <value>a.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerAsociadoNombre" xml:space="preserve">
    <value>upper(a.Nombre) like '%{0}%'</value>
    <comment>Filtro por Nombre</comment>
  </data>
  <data name="CabeceraObtenerRenovacion" xml:space="preserve">
    <value>Select r from Renovacion r left join fetch r.Marca as marca left join fetch r.Interesado as interesado left join fetch r.Agente as agente  left join fetch r.Poder as poder  left join fetch r.BoletinPublicacion as boletin where </value>
    <comment>Cabecera del query para el filtro de Renovacion</comment>
  </data>
  <data name="FiltroObtenerRenovacionFecha" xml:space="preserve">
    <value>r.Fecha between '{0}' and '{1}'</value>
    <comment>Filtro por fecha</comment>
  </data>
  <data name="FiltroObtenerRenovacionId" xml:space="preserve">
    <value>r.Id = {0}</value>
    <comment>Filtro por id</comment>
  </data>
  <data name="FiltroObtenerRenovacionIdMarca" xml:space="preserve">
    <value>marca.Id = {0}</value>
    <comment>Filtro por marca</comment>
  </data>
  <data name="CabeceraObtenerMarcaTercero" xml:space="preserve">
    <value>Select m from MarcaTercero m left join fetch m.Asociado as asociado left join fetch m.Interesado as interesado where </value>
    <comment>Cabecera del query para el filtro de marcaTercero</comment>
  </data>
  <data name="FiltroObtenerMarcaTerceroAsociadoId" xml:space="preserve">
    <value>asociado.Id = {0}</value>
    <comment>filtro por asociado</comment>
  </data>
  <data name="FiltroObtenerMarcaTerceroFechas" xml:space="preserve">
    <value>m.FechaPublicacion between '{0}' and '{1}'</value>
    <comment>Filtro por Fechas</comment>
  </data>
  <data name="FiltroObtenerMarcaTerceroFichas" xml:space="preserve">
    <value>upper(m.Fichas) like '%{0}%'</value>
    <comment>Filtro por fichas</comment>
  </data>
  <data name="FiltroObtenerMarcaTerceroId" xml:space="preserve">
    <value>m.Id = '{0}'</value>
    <comment>filtro por id</comment>
  </data>
  <data name="FiltroObtenerMarcaTerceroInteresadoId" xml:space="preserve">
    <value>interesado.Id = {0}</value>
    <comment>Filtro por interesado</comment>
  </data>
  <data name="CabeceraObtenerOperacion" xml:space="preserve">
    <value>Select o from Operacion o left join fetch o.Interesado as interesado left join fetch o.Asociado as asociado left join fetch o.Boletin as boletin left join fetch o.Servicio as servicio where </value>
    <comment>Cabecera del query para el filtro de operacion</comment>
  </data>
  <data name="FiltroObtenerOperacionFecha" xml:space="preserve">
    <value>o.Fecha between '{0}' and '{1}'</value>
    <comment>Filtro por Fecha</comment>
  </data>
  <data name="FiltroObtenerOperacionId" xml:space="preserve">
    <value>o.Id = {0}</value>
    <comment>Filtro por Id</comment>
  </data>
  <data name="FiltroObtenerOperacionIdMarca" xml:space="preserve">
    <value>o.CodigoAplicada = {0}</value>
    <comment>Filtro por Marca</comment>
  </data>
  <data name="FiltroObtenerOperacionMarca" xml:space="preserve">
    <value>o.Aplicada = '{0}'</value>
    <comment>Filtro por Aplicada</comment>
  </data>
  <data name="FiltroObtenerOperacionServicio" xml:space="preserve">
    <value>servicio.Id = '{0}'</value>
    <comment>Filtro por Servicio</comment>
  </data>
  <data name="CabeceraObtenerMarcaBaseTercero" xml:space="preserve">
    <value>Select m from MarcaBaseTercero m left join fetch m.MarcaTercero as mt where mt.Id= '{0}' and mt.Anexo = {1}</value>
  </data>
  <data name="FiltroObtenerMarcaBaseTerceroId" xml:space="preserve">
    <value>m.Id = {0}</value>
  </data>
  <data name="FiltroObtenerMarcaRecordatorio" xml:space="preserve">
    <value>m.Recordatorio = {0}</value>
    <comment>Filtro marca por recordatorio</comment>
  </data>
  <data name="CabeceraObtenerAgenteDesinflados" xml:space="preserve">
    <value>Select distinct(a) from Agente a where </value>
    <comment>Cabecera del query para el filtro de agentes</comment>
  </data>
  <data name="ObtenerResolucionesPorBoletin" xml:space="preserve">
    <value>Select r from Resolucion r where r.Boletin.Id = {0}</value>
    <comment>Selecciona las resoluciones de un boletin</comment>
  </data>
  <data name="ObtenerInternacionalPorId" xml:space="preserve">
    <value>Select i from Internacional i where i.Id = {0}</value>
    <comment>Selecciona un internacional por Id</comment>
  </data>
  <data name="ObtenerMaxIdMarcaTercero" xml:space="preserve">
    <value>select max(m.Id) from MarcaTercero m where m.Id like '{0}-%'</value>
    <comment>Selecciona el ultimo insert de MarcaTercero del parametro dado</comment>
  </data>
  <data name="ObtenerMaxAnexoMarcaTercero" xml:space="preserve">
    <value>select max(m.Anexo) from MarcaTercero m where m.Id = '{0}'</value>
    <comment>Obtiene el ultimo anexo insertado de un marca Tercero</comment>
  </data>
  <data name="ObtenerMaxSecuenciaMarcaBaseTercero" xml:space="preserve">
    <value>select max(m.Secuencia) from MarcaBaseTercero m</value>
    <comment>Obtiene la Ultima Secuencia de marcaBaseTercero</comment>
  </data>
  <data name="ObtenerTodosMarcaBaseTerceroPorId" xml:space="preserve">
    <value>select m from MarcaBaseTercero m where m.Id like '{0}' and m.Anexo = {1}</value>
    <comment>Selecciona las MarcaBaseTercero por Id y Anexo</comment>
  </data>
</root>